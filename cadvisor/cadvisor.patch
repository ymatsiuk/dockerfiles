diff --git a/metrics/prometheus.go b/metrics/prometheus.go
index 2dd7747b..8edb2857 100644
--- a/metrics/prometheus.go
+++ b/metrics/prometheus.go
@@ -15,7 +15,6 @@
 package metrics
 
 import (
-	"fmt"
 	"regexp"
 	"time"
 
@@ -141,89 +140,6 @@ func NewPrometheusCollector(i infoProvider, f ContainerLabelsFunc) *PrometheusCo
 				getValues: func(s *info.ContainerStats) metricValues {
 					return metricValues{{value: float64(s.Cpu.Usage.User) / float64(time.Second)}}
 				},
-			}, {
-				name:      "container_cpu_system_seconds_total",
-				help:      "Cumulative system cpu time consumed in seconds.",
-				valueType: prometheus.CounterValue,
-				getValues: func(s *info.ContainerStats) metricValues {
-					return metricValues{{value: float64(s.Cpu.Usage.System) / float64(time.Second)}}
-				},
-			}, {
-				name:        "container_cpu_usage_seconds_total",
-				help:        "Cumulative cpu time consumed per cpu in seconds.",
-				valueType:   prometheus.CounterValue,
-				extraLabels: []string{"cpu"},
-				getValues: func(s *info.ContainerStats) metricValues {
-					values := make(metricValues, 0, len(s.Cpu.Usage.PerCpu))
-					for i, value := range s.Cpu.Usage.PerCpu {
-						if value > 0 {
-							values = append(values, metricValue{
-								value:  float64(value) / float64(time.Second),
-								labels: []string{fmt.Sprintf("cpu%02d", i)},
-							})
-						}
-					}
-					return values
-				},
-			}, {
-				name:      "container_cpu_cfs_periods_total",
-				help:      "Number of elapsed enforcement period intervals.",
-				valueType: prometheus.CounterValue,
-				condition: func(s info.ContainerSpec) bool { return s.Cpu.Quota != 0 },
-				getValues: func(s *info.ContainerStats) metricValues {
-					return metricValues{{value: float64(s.Cpu.CFS.Periods)}}
-				},
-			}, {
-				name:      "container_cpu_cfs_throttled_periods_total",
-				help:      "Number of throttled period intervals.",
-				valueType: prometheus.CounterValue,
-				condition: func(s info.ContainerSpec) bool { return s.Cpu.Quota != 0 },
-				getValues: func(s *info.ContainerStats) metricValues {
-					return metricValues{{value: float64(s.Cpu.CFS.ThrottledPeriods)}}
-				},
-			}, {
-				name:      "container_cpu_cfs_throttled_seconds_total",
-				help:      "Total time duration the container has been throttled.",
-				valueType: prometheus.CounterValue,
-				condition: func(s info.ContainerSpec) bool { return s.Cpu.Quota != 0 },
-				getValues: func(s *info.ContainerStats) metricValues {
-					return metricValues{{value: float64(s.Cpu.CFS.ThrottledTime) / float64(time.Second)}}
-				},
-			}, {
-				name:      "container_cpu_load_average_10s",
-				help:      "Value of container cpu load average over the last 10 seconds.",
-				valueType: prometheus.GaugeValue,
-				getValues: func(s *info.ContainerStats) metricValues {
-					return metricValues{{value: float64(s.Cpu.LoadAverage)}}
-				},
-			}, {
-				name:      "container_memory_cache",
-				help:      "Number of bytes of page cache memory.",
-				valueType: prometheus.GaugeValue,
-				getValues: func(s *info.ContainerStats) metricValues {
-					return metricValues{{value: float64(s.Memory.Cache)}}
-				},
-			}, {
-				name:      "container_memory_rss",
-				help:      "Size of RSS in bytes.",
-				valueType: prometheus.GaugeValue,
-				getValues: func(s *info.ContainerStats) metricValues {
-					return metricValues{{value: float64(s.Memory.RSS)}}
-				},
-			}, {
-				name:      "container_memory_swap",
-				help:      "Container swap usage in bytes.",
-				valueType: prometheus.GaugeValue,
-				getValues: func(s *info.ContainerStats) metricValues {
-					return metricValues{{value: float64(s.Memory.Swap)}}
-				},
-			}, {
-				name:      "container_memory_failcnt",
-				help:      "Number of memory usage hits limits",
-				valueType: prometheus.CounterValue,
-				getValues: func(s *info.ContainerStats) metricValues {
-					return metricValues{{value: float64(s.Memory.Failcnt)}}
-				},
 			}, {
 				name:      "container_memory_usage_bytes",
 				help:      "Current memory usage in bytes, including all memory regardless of when it was accessed",
@@ -231,293 +147,6 @@ func NewPrometheusCollector(i infoProvider, f ContainerLabelsFunc) *PrometheusCo
 				getValues: func(s *info.ContainerStats) metricValues {
 					return metricValues{{value: float64(s.Memory.Usage)}}
 				},
-			},
-			{
-				name:      "container_memory_max_usage_bytes",
-				help:      "Maximum memory usage recorded in bytes",
-				valueType: prometheus.GaugeValue,
-				getValues: func(s *info.ContainerStats) metricValues {
-					return metricValues{{value: float64(s.Memory.MaxUsage)}}
-				},
-			}, {
-				name:      "container_memory_working_set_bytes",
-				help:      "Current working set in bytes.",
-				valueType: prometheus.GaugeValue,
-				getValues: func(s *info.ContainerStats) metricValues {
-					return metricValues{{value: float64(s.Memory.WorkingSet)}}
-				},
-			}, {
-				name:        "container_memory_failures_total",
-				help:        "Cumulative count of memory allocation failures.",
-				valueType:   prometheus.CounterValue,
-				extraLabels: []string{"type", "scope"},
-				getValues: func(s *info.ContainerStats) metricValues {
-					return metricValues{
-						{
-							value:  float64(s.Memory.ContainerData.Pgfault),
-							labels: []string{"pgfault", "container"},
-						},
-						{
-							value:  float64(s.Memory.ContainerData.Pgmajfault),
-							labels: []string{"pgmajfault", "container"},
-						},
-						{
-							value:  float64(s.Memory.HierarchicalData.Pgfault),
-							labels: []string{"pgfault", "hierarchy"},
-						},
-						{
-							value:  float64(s.Memory.HierarchicalData.Pgmajfault),
-							labels: []string{"pgmajfault", "hierarchy"},
-						},
-					}
-				},
-			}, {
-				name:        "container_accelerator_memory_total_bytes",
-				help:        "Total accelerator memory.",
-				valueType:   prometheus.GaugeValue,
-				extraLabels: []string{"make", "model", "acc_id"},
-				getValues: func(s *info.ContainerStats) metricValues {
-					values := make(metricValues, 0, len(s.Accelerators))
-					for _, value := range s.Accelerators {
-						values = append(values, metricValue{
-							value:  float64(value.MemoryTotal),
-							labels: []string{value.Make, value.Model, value.ID},
-						})
-					}
-					return values
-				},
-			}, {
-				name:        "container_accelerator_memory_used_bytes",
-				help:        "Total accelerator memory allocated.",
-				valueType:   prometheus.GaugeValue,
-				extraLabels: []string{"make", "model", "acc_id"},
-				getValues: func(s *info.ContainerStats) metricValues {
-					values := make(metricValues, 0, len(s.Accelerators))
-					for _, value := range s.Accelerators {
-						values = append(values, metricValue{
-							value:  float64(value.MemoryUsed),
-							labels: []string{value.Make, value.Model, value.ID},
-						})
-					}
-					return values
-				},
-			}, {
-				name:        "container_accelerator_duty_cycle",
-				help:        "Percent of time over the past sample period during which the accelerator was actively processing.",
-				valueType:   prometheus.GaugeValue,
-				extraLabels: []string{"make", "model", "acc_id"},
-				getValues: func(s *info.ContainerStats) metricValues {
-					values := make(metricValues, 0, len(s.Accelerators))
-					for _, value := range s.Accelerators {
-						values = append(values, metricValue{
-							value:  float64(value.DutyCycle),
-							labels: []string{value.Make, value.Model, value.ID},
-						})
-					}
-					return values
-				},
-			}, {
-				name:        "container_fs_inodes_free",
-				help:        "Number of available Inodes",
-				valueType:   prometheus.GaugeValue,
-				extraLabels: []string{"device"},
-				getValues: func(s *info.ContainerStats) metricValues {
-					return fsValues(s.Filesystem, func(fs *info.FsStats) float64 {
-						return float64(fs.InodesFree)
-					})
-				},
-			}, {
-				name:        "container_fs_inodes_total",
-				help:        "Number of Inodes",
-				valueType:   prometheus.GaugeValue,
-				extraLabels: []string{"device"},
-				getValues: func(s *info.ContainerStats) metricValues {
-					return fsValues(s.Filesystem, func(fs *info.FsStats) float64 {
-						return float64(fs.Inodes)
-					})
-				},
-			}, {
-				name:        "container_fs_limit_bytes",
-				help:        "Number of bytes that can be consumed by the container on this filesystem.",
-				valueType:   prometheus.GaugeValue,
-				extraLabels: []string{"device"},
-				getValues: func(s *info.ContainerStats) metricValues {
-					return fsValues(s.Filesystem, func(fs *info.FsStats) float64 {
-						return float64(fs.Limit)
-					})
-				},
-			}, {
-				name:        "container_fs_usage_bytes",
-				help:        "Number of bytes that are consumed by the container on this filesystem.",
-				valueType:   prometheus.GaugeValue,
-				extraLabels: []string{"device"},
-				getValues: func(s *info.ContainerStats) metricValues {
-					return fsValues(s.Filesystem, func(fs *info.FsStats) float64 {
-						return float64(fs.Usage)
-					})
-				},
-			}, {
-				name:        "container_fs_reads_bytes_total",
-				help:        "Cumulative count of bytes read",
-				valueType:   prometheus.CounterValue,
-				extraLabels: []string{"device"},
-				getValues: func(s *info.ContainerStats) metricValues {
-					return ioValues(
-						s.DiskIo.IoServiceBytes, "Read", asFloat64,
-						nil, nil,
-					)
-				},
-			}, {
-				name:        "container_fs_reads_total",
-				help:        "Cumulative count of reads completed",
-				valueType:   prometheus.CounterValue,
-				extraLabels: []string{"device"},
-				getValues: func(s *info.ContainerStats) metricValues {
-					return ioValues(
-						s.DiskIo.IoServiced, "Read", asFloat64,
-						s.Filesystem, func(fs *info.FsStats) float64 {
-							return float64(fs.ReadsCompleted)
-						},
-					)
-				},
-			}, {
-				name:        "container_fs_sector_reads_total",
-				help:        "Cumulative count of sector reads completed",
-				valueType:   prometheus.CounterValue,
-				extraLabels: []string{"device"},
-				getValues: func(s *info.ContainerStats) metricValues {
-					return ioValues(
-						s.DiskIo.Sectors, "Read", asFloat64,
-						s.Filesystem, func(fs *info.FsStats) float64 {
-							return float64(fs.SectorsRead)
-						},
-					)
-				},
-			}, {
-				name:        "container_fs_reads_merged_total",
-				help:        "Cumulative count of reads merged",
-				valueType:   prometheus.CounterValue,
-				extraLabels: []string{"device"},
-				getValues: func(s *info.ContainerStats) metricValues {
-					return ioValues(
-						s.DiskIo.IoMerged, "Read", asFloat64,
-						s.Filesystem, func(fs *info.FsStats) float64 {
-							return float64(fs.ReadsMerged)
-						},
-					)
-				},
-			}, {
-				name:        "container_fs_read_seconds_total",
-				help:        "Cumulative count of seconds spent reading",
-				valueType:   prometheus.CounterValue,
-				extraLabels: []string{"device"},
-				getValues: func(s *info.ContainerStats) metricValues {
-					return ioValues(
-						s.DiskIo.IoServiceTime, "Read", asNanosecondsToSeconds,
-						s.Filesystem, func(fs *info.FsStats) float64 {
-							return float64(fs.ReadTime) / float64(time.Second)
-						},
-					)
-				},
-			}, {
-				name:        "container_fs_writes_bytes_total",
-				help:        "Cumulative count of bytes written",
-				valueType:   prometheus.CounterValue,
-				extraLabels: []string{"device"},
-				getValues: func(s *info.ContainerStats) metricValues {
-					return ioValues(
-						s.DiskIo.IoServiceBytes, "Write", asFloat64,
-						nil, nil,
-					)
-				},
-			}, {
-				name:        "container_fs_writes_total",
-				help:        "Cumulative count of writes completed",
-				valueType:   prometheus.CounterValue,
-				extraLabels: []string{"device"},
-				getValues: func(s *info.ContainerStats) metricValues {
-					return ioValues(
-						s.DiskIo.IoServiced, "Write", asFloat64,
-						s.Filesystem, func(fs *info.FsStats) float64 {
-							return float64(fs.WritesCompleted)
-						},
-					)
-				},
-			}, {
-				name:        "container_fs_sector_writes_total",
-				help:        "Cumulative count of sector writes completed",
-				valueType:   prometheus.CounterValue,
-				extraLabels: []string{"device"},
-				getValues: func(s *info.ContainerStats) metricValues {
-					return ioValues(
-						s.DiskIo.Sectors, "Write", asFloat64,
-						s.Filesystem, func(fs *info.FsStats) float64 {
-							return float64(fs.SectorsWritten)
-						},
-					)
-				},
-			}, {
-				name:        "container_fs_writes_merged_total",
-				help:        "Cumulative count of writes merged",
-				valueType:   prometheus.CounterValue,
-				extraLabels: []string{"device"},
-				getValues: func(s *info.ContainerStats) metricValues {
-					return ioValues(
-						s.DiskIo.IoMerged, "Write", asFloat64,
-						s.Filesystem, func(fs *info.FsStats) float64 {
-							return float64(fs.WritesMerged)
-						},
-					)
-				},
-			}, {
-				name:        "container_fs_write_seconds_total",
-				help:        "Cumulative count of seconds spent writing",
-				valueType:   prometheus.CounterValue,
-				extraLabels: []string{"device"},
-				getValues: func(s *info.ContainerStats) metricValues {
-					return ioValues(
-						s.DiskIo.IoServiceTime, "Write", asNanosecondsToSeconds,
-						s.Filesystem, func(fs *info.FsStats) float64 {
-							return float64(fs.WriteTime) / float64(time.Second)
-						},
-					)
-				},
-			}, {
-				name:        "container_fs_io_current",
-				help:        "Number of I/Os currently in progress",
-				valueType:   prometheus.GaugeValue,
-				extraLabels: []string{"device"},
-				getValues: func(s *info.ContainerStats) metricValues {
-					return ioValues(
-						s.DiskIo.IoQueued, "Total", asFloat64,
-						s.Filesystem, func(fs *info.FsStats) float64 {
-							return float64(fs.IoInProgress)
-						},
-					)
-				},
-			}, {
-				name:        "container_fs_io_time_seconds_total",
-				help:        "Cumulative count of seconds spent doing I/Os",
-				valueType:   prometheus.CounterValue,
-				extraLabels: []string{"device"},
-				getValues: func(s *info.ContainerStats) metricValues {
-					return ioValues(
-						s.DiskIo.IoServiceTime, "Total", asNanosecondsToSeconds,
-						s.Filesystem, func(fs *info.FsStats) float64 {
-							return float64(float64(fs.IoTime) / float64(time.Second))
-						},
-					)
-				},
-			}, {
-				name:        "container_fs_io_time_weighted_seconds_total",
-				help:        "Cumulative weighted I/O time in seconds",
-				valueType:   prometheus.CounterValue,
-				extraLabels: []string{"device"},
-				getValues: func(s *info.ContainerStats) metricValues {
-					return fsValues(s.Filesystem, func(fs *info.FsStats) float64 {
-						return float64(fs.WeightedIoTime) / float64(time.Second)
-					})
-				},
 			}, {
 				name:        "container_network_receive_bytes_total",
 				help:        "Cumulative count of bytes received",
@@ -533,51 +162,6 @@ func NewPrometheusCollector(i infoProvider, f ContainerLabelsFunc) *PrometheusCo
 					}
 					return values
 				},
-			}, {
-				name:        "container_network_receive_packets_total",
-				help:        "Cumulative count of packets received",
-				valueType:   prometheus.CounterValue,
-				extraLabels: []string{"interface"},
-				getValues: func(s *info.ContainerStats) metricValues {
-					values := make(metricValues, 0, len(s.Network.Interfaces))
-					for _, value := range s.Network.Interfaces {
-						values = append(values, metricValue{
-							value:  float64(value.RxPackets),
-							labels: []string{value.Name},
-						})
-					}
-					return values
-				},
-			}, {
-				name:        "container_network_receive_packets_dropped_total",
-				help:        "Cumulative count of packets dropped while receiving",
-				valueType:   prometheus.CounterValue,
-				extraLabels: []string{"interface"},
-				getValues: func(s *info.ContainerStats) metricValues {
-					values := make(metricValues, 0, len(s.Network.Interfaces))
-					for _, value := range s.Network.Interfaces {
-						values = append(values, metricValue{
-							value:  float64(value.RxDropped),
-							labels: []string{value.Name},
-						})
-					}
-					return values
-				},
-			}, {
-				name:        "container_network_receive_errors_total",
-				help:        "Cumulative count of errors encountered while receiving",
-				valueType:   prometheus.CounterValue,
-				extraLabels: []string{"interface"},
-				getValues: func(s *info.ContainerStats) metricValues {
-					values := make(metricValues, 0, len(s.Network.Interfaces))
-					for _, value := range s.Network.Interfaces {
-						values = append(values, metricValue{
-							value:  float64(value.RxErrors),
-							labels: []string{value.Name},
-						})
-					}
-					return values
-				},
 			}, {
 				name:        "container_network_transmit_bytes_total",
 				help:        "Cumulative count of bytes transmitted",
@@ -593,158 +177,6 @@ func NewPrometheusCollector(i infoProvider, f ContainerLabelsFunc) *PrometheusCo
 					}
 					return values
 				},
-			}, {
-				name:        "container_network_transmit_packets_total",
-				help:        "Cumulative count of packets transmitted",
-				valueType:   prometheus.CounterValue,
-				extraLabels: []string{"interface"},
-				getValues: func(s *info.ContainerStats) metricValues {
-					values := make(metricValues, 0, len(s.Network.Interfaces))
-					for _, value := range s.Network.Interfaces {
-						values = append(values, metricValue{
-							value:  float64(value.TxPackets),
-							labels: []string{value.Name},
-						})
-					}
-					return values
-				},
-			}, {
-				name:        "container_network_transmit_packets_dropped_total",
-				help:        "Cumulative count of packets dropped while transmitting",
-				valueType:   prometheus.CounterValue,
-				extraLabels: []string{"interface"},
-				getValues: func(s *info.ContainerStats) metricValues {
-					values := make(metricValues, 0, len(s.Network.Interfaces))
-					for _, value := range s.Network.Interfaces {
-						values = append(values, metricValue{
-							value:  float64(value.TxDropped),
-							labels: []string{value.Name},
-						})
-					}
-					return values
-				},
-			}, {
-				name:        "container_network_transmit_errors_total",
-				help:        "Cumulative count of errors encountered while transmitting",
-				valueType:   prometheus.CounterValue,
-				extraLabels: []string{"interface"},
-				getValues: func(s *info.ContainerStats) metricValues {
-					values := make(metricValues, 0, len(s.Network.Interfaces))
-					for _, value := range s.Network.Interfaces {
-						values = append(values, metricValue{
-							value:  float64(value.TxErrors),
-							labels: []string{value.Name},
-						})
-					}
-					return values
-				},
-			}, {
-				name:        "container_network_tcp_usage_total",
-				help:        "tcp connection usage statistic for container",
-				valueType:   prometheus.GaugeValue,
-				extraLabels: []string{"tcp_state"},
-				getValues: func(s *info.ContainerStats) metricValues {
-					return metricValues{
-						{
-							value:  float64(s.Network.Tcp.Established),
-							labels: []string{"established"},
-						},
-						{
-							value:  float64(s.Network.Tcp.SynSent),
-							labels: []string{"synsent"},
-						},
-						{
-							value:  float64(s.Network.Tcp.SynRecv),
-							labels: []string{"synrecv"},
-						},
-						{
-							value:  float64(s.Network.Tcp.FinWait1),
-							labels: []string{"finwait1"},
-						},
-						{
-							value:  float64(s.Network.Tcp.FinWait2),
-							labels: []string{"finwait2"},
-						},
-						{
-							value:  float64(s.Network.Tcp.TimeWait),
-							labels: []string{"timewait"},
-						},
-						{
-							value:  float64(s.Network.Tcp.Close),
-							labels: []string{"close"},
-						},
-						{
-							value:  float64(s.Network.Tcp.CloseWait),
-							labels: []string{"closewait"},
-						},
-						{
-							value:  float64(s.Network.Tcp.LastAck),
-							labels: []string{"lastack"},
-						},
-						{
-							value:  float64(s.Network.Tcp.Listen),
-							labels: []string{"listen"},
-						},
-						{
-							value:  float64(s.Network.Tcp.Closing),
-							labels: []string{"closing"},
-						},
-					}
-				},
-			}, {
-				name:        "container_network_udp_usage_total",
-				help:        "udp connection usage statistic for container",
-				valueType:   prometheus.GaugeValue,
-				extraLabels: []string{"udp_state"},
-				getValues: func(s *info.ContainerStats) metricValues {
-					return metricValues{
-						{
-							value:  float64(s.Network.Udp.Listen),
-							labels: []string{"listen"},
-						},
-						{
-							value:  float64(s.Network.Udp.Dropped),
-							labels: []string{"dropped"},
-						},
-						{
-							value:  float64(s.Network.Udp.RxQueued),
-							labels: []string{"rxqueued"},
-						},
-						{
-							value:  float64(s.Network.Udp.TxQueued),
-							labels: []string{"txqueued"},
-						},
-					}
-				},
-			}, {
-				name:        "container_tasks_state",
-				help:        "Number of tasks in given state",
-				extraLabels: []string{"state"},
-				valueType:   prometheus.GaugeValue,
-				getValues: func(s *info.ContainerStats) metricValues {
-					return metricValues{
-						{
-							value:  float64(s.TaskStats.NrSleeping),
-							labels: []string{"sleeping"},
-						},
-						{
-							value:  float64(s.TaskStats.NrRunning),
-							labels: []string{"running"},
-						},
-						{
-							value:  float64(s.TaskStats.NrStopped),
-							labels: []string{"stopped"},
-						},
-						{
-							value:  float64(s.TaskStats.NrUninterruptible),
-							labels: []string{"uninterruptible"},
-						},
-						{
-							value:  float64(s.TaskStats.NrIoWait),
-							labels: []string{"iowaiting"},
-						},
-					}
-				},
 			},
 		},
 	}
@@ -835,30 +267,6 @@ func (c *PrometheusCollector) collectContainersInfo(ch chan<- prometheus.Metric)
 			values = append(values, containerLabels[l])
 		}
 
-		// Container spec
-		desc := prometheus.NewDesc("container_start_time_seconds", "Start time of the container since unix epoch in seconds.", labels, nil)
-		ch <- prometheus.MustNewConstMetric(desc, prometheus.GaugeValue, float64(container.Spec.CreationTime.Unix()), values...)
-
-		if container.Spec.HasCpu {
-			desc = prometheus.NewDesc("container_spec_cpu_period", "CPU period of the container.", labels, nil)
-			ch <- prometheus.MustNewConstMetric(desc, prometheus.GaugeValue, float64(container.Spec.Cpu.Period), values...)
-			if container.Spec.Cpu.Quota != 0 {
-				desc = prometheus.NewDesc("container_spec_cpu_quota", "CPU quota of the container.", labels, nil)
-				ch <- prometheus.MustNewConstMetric(desc, prometheus.GaugeValue, float64(container.Spec.Cpu.Quota), values...)
-			}
-			desc := prometheus.NewDesc("container_spec_cpu_shares", "CPU share of the container.", labels, nil)
-			ch <- prometheus.MustNewConstMetric(desc, prometheus.GaugeValue, float64(container.Spec.Cpu.Limit), values...)
-
-		}
-		if container.Spec.HasMemory {
-			desc := prometheus.NewDesc("container_spec_memory_limit_bytes", "Memory limit for the container.", labels, nil)
-			ch <- prometheus.MustNewConstMetric(desc, prometheus.GaugeValue, specMemoryValue(container.Spec.Memory.Limit), values...)
-			desc = prometheus.NewDesc("container_spec_memory_swap_limit_bytes", "Memory swap limit for the container.", labels, nil)
-			ch <- prometheus.MustNewConstMetric(desc, prometheus.GaugeValue, specMemoryValue(container.Spec.Memory.SwapLimit), values...)
-			desc = prometheus.NewDesc("container_spec_memory_reservation_limit_bytes", "Memory reservation limit for the container.", labels, nil)
-			ch <- prometheus.MustNewConstMetric(desc, prometheus.GaugeValue, specMemoryValue(container.Spec.Memory.Reservation), values...)
-		}
-
 		// Now for the actual metrics
 		stats := container.Stats[0]
 		for _, cm := range c.containerMetrics {
